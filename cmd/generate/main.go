package main

import (
	"fmt"
	"log"
	"os"

	"github.com/winkula/dragons/pkg/model"
)

func main() {
	f, err := os.Create("validate_lookup.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	write(f, `// Code generated by go run ../../cmd/generate; DO NOT EDIT.

package model

var lookupTable = []uint8{`)

	count := len(model.AllFields)

	for f7 := 0; f7 < count; f7++ {
		for f6 := 0; f6 < count; f6++ {
			for f5 := 0; f5 < count; f5++ {
				for f4 := 0; f4 < count; f4++ {
					for f3 := 0; f3 < count; f3++ {
						for f2 := 0; f2 < count; f2++ {
							for f1 := 0; f1 < count; f1++ {
								for f0 := 0; f0 < count; f0++ {

									key := 0

									key += f0
									key += f1 * count
									key += f2 * count * count
									key += f3 * count * count * count
									key += f4 * count * count * count * count
									key += f5 * count * count * count * count * count
									key += f6 * count * count * count * count * count * count
									key += f7 * count * count * count * count * count * count * count

									g := model.New(3, 3)
									g.SetSquarei(0, model.Square(f0))
									g.SetSquarei(1, model.Square(f1))
									g.SetSquarei(2, model.Square(f2))
									g.SetSquarei(3, model.Square(f3))

									g.SetSquarei(5, model.Square(f4))
									g.SetSquarei(6, model.Square(f5))
									g.SetSquarei(7, model.Square(f6))
									g.SetSquarei(8, model.Square(f7))

									//fmt.Println(g)
									//time.Sleep(time.Millisecond)

									val := 0
									for _, field := range model.AllFields {
										g.SetSquarei(4, field)
										if model.ValidatePartial(g, []int{4}) {
											val |= 1 << field
										}
									}

									write(f, fmt.Sprintf("%d, ", val))
								}
							}
						}
					}
				}
			}
		}
	}

	write(f, "}\n")
}

func write(f *os.File, content string) {
	_, err := f.WriteString(content)
	if err != nil {
		log.Fatal(err)
	}
}
